{"version":3,"sources":["assets/logo.png","components/button/Button.js","components/input/Input.js","components/image/image.js","components/modal/modal.js","pages/register/register.js","pages/login/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","type","id","className","class","name","Input","value","placeholder","Image","src","alt","Modal","onClose","children","onClick","e","target","Register","useState","user","setUser","email","setEmail","password","setPassword","onChange","htmlFor","job","handleClick","firebase","auth","createUserWithEmailAndPassword","then","currentUser","updateProfile","displayName","uid","emailUser","user_uid","firestore","collection","doc","set","catch","error","console","log","Login","isModalVisible","setIsModalVisible","logo","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.217cd581.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.424fb1ed.png\";","import React from 'react';\nimport './button.css'\n\nconst Button = (props) => {\nreturn <button type={props.type} id={props.id} className={props.class}>{props.name}</button>\n}\n\nexport default Button;","import React from 'react';\n\nconst Input = (props) => {\n  return <input type={props.type} id={props.id} className={props.class} value={props.value} placeholder={props.placeholder}></input>\n}\n\nexport default Input;","import React from 'react';\n\nconst Image = (props) => (\n  <img src={props.src} alt={props.alt} className={props.class} />\n)\n\nexport default Image;","import React from 'react';\nimport './modal.css'\n\nconst Modal = ({ id = 'modal', onClose = () => {}, children }) => {\n  const handleOutsideClick = (e) => {\n    if (e.target.id === id) onClose()\n  }\n  return <div id={id} className='modal' onClick={handleOutsideClick}>\n          <div className='container'>\n            <button className='close' onClick={onClose}></button>\n            <div className='content'>\n              {children}\n            </div>\n          </div>\n        </div>\n}\nexport default Modal;","import React, { useState } from 'react';\nimport Button from '../../components/button/Button'\nimport Input from '../../components/input/Input'\nimport firebase from 'firebase'\n\nconst Register = () => {\n  const [user, setUser] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n\n\n  const registerLogin = (email, password, name, job) => {\n   \n    firebase.auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then( ()=> firebase.auth().currentUser.updateProfile({ displayName: name }))\n      .then(() => {\n        const uid = firebase.auth().currentUser.uid;\n        const user = {\n        job,\n        emailUser: email,\n        user_uid: firebase.auth().currentUser.uid,\n        name,\n        };\n        firebase.firestore().collection('users').doc(uid).set(user);\n      })\n      .catch((error) => {\n        console.log(error)\n      });\n  };\n\n  return (\n    <form>\n        <Input type=\"text\" id=\"name\" class=\"name\" value={user} onChange={e => setUser({...user, name: e.target.value})} placeholder=\"Nome e Sobrenome\" />\n        <Input type=\"email\" id=\"email\" class=\"email\" value={email} onChange={e => setEmail({...user, email: e.target.value})} placeholder=\"example@example.com\" />\n        <Input type=\"password\" id=\"password\" class=\"password\" value={password} onChange={e => setPassword({...password, password: e.target.value})} placeholder=\"Digite sua senha\" />\n        <div className=''>\n          <label htmlFor='cozinha'>COZINHA</label>\n          <Input type='radio' className='radio-button' value='kitchen' onChange={e => setUser({...user, job: e.target.value})} name='option' id='kitchen' />\n          <label htmlFor='salao'>SALÃO</label>\n          <Input type='radio' className='' value='hall' onChange={e => setUser({...user, job: e.target.value})} name='' id='salao' />\n        </div>\n        <Button type='submit' id=\"register\" class=\"register\" handleClick={registerLogin} name=\"Criar Conta\" />\n    </form>\n\n)\n}\n\nexport default Register;","import React, {useState} from 'react';\nimport Button from '../../components/button/Button'\nimport Input from '../../components/input/Input'\nimport Image from '../../components/image/image'\nimport logo from '../../assets/logo.png'\nimport Modal from '../../components/modal/modal';\nimport Register from '../register/register';\n\nconst Login = () => {\n    const [isModalVisible, setIsModalVisible] = useState(false);\nreturn (\n    <div>\n        <Image src={logo} alt='logo' class='logo-login'/>\n        <form>\n            <Input type=\"email\" id=\"email\" class=\"emaill\" placeholder=\"Digite seu email\" />\n            <Input type=\"password\" id=\"password\" class=\"passwordd\" placeholder=\"Digite sua senha\" />\n            <Button id=\"login\" class=\"logind\" name=\"Entrar\" />\n            <p onClick={ () => setIsModalVisible(true) }>Ainda não tem cadastro? Registre-se aqui!</p>\n            {isModalVisible ? (\n            <Modal onClose={ () => setIsModalVisible(false) }>\n                <Register />\n            </Modal>\n            ) : null}\n        </form>\n    </div>\n)\n}\n\nexport default Login;","import React from 'react';\nimport './App.css';\nimport Login from './pages/login/login.js'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n        <Switch>\n          <Route exact path=\"/login\">\n            <Login />\n          </Route>\n          <Route exact path=\"/login\">\n            <Login />\n          </Route>\n          <Route exact path=\"/\">\n            <Login />\n          </Route>\n        </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}